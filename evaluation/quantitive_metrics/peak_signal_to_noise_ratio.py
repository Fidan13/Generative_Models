import tensorflow as tf
from evaluation.shared import log10
def psnr(inputs, x_logits):
    imageB = tf.sigmoid(x_logits)
    imageA = inputs
    shapeB = list(imageB.shape)
    if len(shapeB) > 4:
        shapeA = list(imageA.shape)
        imageA = tf.reshape(imageA, tf.TensorShape([shapeA[0]*shapeA[1]]+shapeA[2:]))
        imageB = tf.reshape(imageB, tf.TensorShape([shapeB[0] * shapeB[1]] + shapeB[2:]))

    """
    Computes the Peak Signal to Noise Ratio error between the generated images and the ground
    truth images.

    @param gen_frames: A tensor of shape [batch_size, height, width, 3]. The frames generated by the generator model.
    @param gt_frames: A tensor of shape [batch_size, height, width, 3]. The ground-truth frames for each frame in gen_frames.
    @return: A scalar tensor. The mean Peak Signal to Noise Ratio error over each frame in the batch.
    """

    shapeB = tf.shape(imageB)
    num_pixels = tf.cast(shapeB[1] * shapeB[2] * shapeB[3], dtype='float')
    square_diff = tf.square(imageA - imageB)

    batch_errors = 10 * log10(1 / ((1 / num_pixels) * tf.reduce_sum(square_diff, [1, 2, 3])))
    return tf.reduce_mean(batch_errors)

